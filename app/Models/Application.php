<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Application extends Model
{
    // use HasFactory;

    protected $guarded = [];

    protected $keyType = 'string';

    public $incrementing = false;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($model) {
            $model->id = \Illuminate\Support\Str::uuid();
        });

        static::created(function ($model) {
            if ($model->uses_role_system) {
                $permGroup = $model->permissionGroups()->create([
                    'name' => 'Default',
                    'description' => 'Default permission group',
                    'unique_name' => 'application',
                ]);
                $perm = $permGroup->permissions()->create([
                    'name' => 'View',
                    'description' => 'View the application',
                    'unique_name' => 'view',
                ]);
                Role::where('name', 'admin')->first()->permissions()->attach($perm);
            }
        });
    }

    public function getShortDescriptionAttribute(): ?string
    {
        // if description is longer than 100 characters, cut it and add '...' at the end
        return strlen($this->description) > 100 ? substr($this->description, 0, 100).'...' : $this->description;
    }

    public function owner(): \Illuminate\Database\Eloquent\Relations\BelongsTo
    {
        return $this->belongsTo(\App\Models\User::class);
    }

    public function clients(): \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(\App\Models\Client::class);
    }

    public function permissions(): \Illuminate\Support\Collection
    {
        // Add permissions of each permission group to the application
        $permissions = [];
        foreach ($this->permissionGroups as $group) {
            foreach ($group->permissions as $permission) {
                $permissions[] = $permission;
            }
        }

        return collect($permissions);
    }

    public function permissionGroups(): \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(\App\Models\PermissionGroup::class);
    }
}
