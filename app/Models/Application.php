<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Collection;

/**
 * Class Application
 *
 * Represents an application in the system.
 *
 * @property string $id The unique identifier for the application.
 * @property string $name The name of the application.
 * @property string $owner_id The ID of the user who owns the application.
 * @property bool $uses_role_system Indicates if the application uses a role-based permission system.
 * @property bool $first_party Indicates if the application is a first-party application.
 * @property Collection<int, \App\Models\PermissionGroup> $permissionGroups The permission groups associated with the application.
 **/
class Application extends Model
{
    // use HasFactory;

    protected $guarded = [];

    protected $keyType = 'string';

    public $incrementing = false;

    #[\Override]
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($model) {
            $model->id = \Illuminate\Support\Str::uuid();
        });

        static::created(function ($model) {
            if ($model->uses_role_system) {
                $permGroup = $model->permissionGroups()->create([
                    'name' => 'Default',
                    'description' => 'Default permission group',
                    'unique_name' => 'application',
                ]);
                $perm = $permGroup->permissions()->create([
                    'name' => 'View',
                    'description' => 'View the application',
                    'unique_name' => 'view',
                ]);
                Role::where('name', 'admin')->first()->permissions()->attach($perm);
            }
        });
    }

    /** @psalm-suppress PossiblyUnusedMethod */
    public function permissions(): \Illuminate\Support\Collection
    {
        // Add permissions of each permission group to the application
        $permissions = [];
        foreach ($this->permissionGroups as $group) {
            // Assert instanceof
            // assert($group instanceof \App\Models\PermissionGroup, 'Permission group must be an instance of \App\Models\PermissionGroup');

            foreach ($group->permissions as $permission) {
                $permissions[] = $permission;
            }
        }

        return collect($permissions); // @phpstan-ignore argument.templateType
    }

    public function permissionGroups(): \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(\App\Models\PermissionGroup::class);
    }
}
